#!/usr/bin/env bash

# The most important line in every shell script. Basically this says: This
# script should fail once a command invocation itself fails.
set -e

#/ usage: php-build [options] <definition> <prefix>
#/
#/   <definition>       What release should be used, as well as release-specific
#/                      configuration. This is either the name of a builtin
#/                      definition file (as listed with --definitions) or a path
#/                      to the definition file.
#/   <prefix>           All built executables, configurations and libraries are
#/                      placed in this directory. It's created if it doesn't
#/                      exist.
#/
#/   --definitions      Lists all available definitions and exit
#/   --definition       Display contents of the specified <definition> file.
#/   -h|--help          Display this help and exit
#/   -k|--keep          Do not remove previously compiled object files
#/   -i|--ini <env>     php.ini to use. If <env> is a file then this file is
#/                      used, otherwise php.ini-<env> from the source
#/                      distribution is used. Defaults to "production".
#/   -V|--version       Display version information and exit
#/   -v|--verbose       Display compiler output to STDERR
#/
#
# Usage message done like [shocco](https://github.com/rtomayko/shocco)

# Set the `PHP_BUILD_DEBUG` environment variable to `yes` to trigger the
# `set -x` call, which in turn outputs every issued shell command to `STDOUT`.
if [ -n "$PHP_BUILD_DEBUG" ]; then
    set -x
fi

# Preserve STDERR on FD3, so we can easily log build errors on FD2 to a file and
# use FD3 for php-build's visible error messages.
exec 3<&2

# Use FD5 to dump messages
exec 5>/dev/null

# Simple function for resolving a relative path to an absolute one
function realpath() {
    local path="$1"
    local cwd="$(pwd)"
    local name=""

    if [ -z "$path" ]; then
        echo "realpath: Path is empty" >&3
        return 1
    fi

    while [ -n "$path" ]; do
        cd $(dirname "$path")
        name=$(basename "$path")
        path="$(readlink "$name" || true)"
    done

    echo "$(pwd)/$name"
    cd "$cwd"
}

# Uses uname to check if php-build is run on OSX. This is used later on to
# enable specifc fixes for OSX oddnesses in library file placement.
operating_system=$(uname)
osx_version_string="";

function is_osx {
    if [ "$operating_system" = "Darwin" ]; then
        return 0
    else
        return 1
    fi
}

if is_osx; then
  osx_version_string=$(sw_vers -productVersion)
fi;

function osx_major {
    if is_osx ; then
        local osx_major=${osx_version_string%%.*}
        echo $osx_major
    fi
    return 0
}

function osx_minor {
    if is_osx ; then
        local tmp=${osx_version_string#*.}
        local osx_minor=${tmp%%.*}
        echo $osx_minor
    fi
    return 0
}

# Common Variables
# ----------------

# This is the path where php-build is installed. This is treated as the base for
# the `share/` and `tmp/` folders of php-build.
PHP_BUILD_ROOT="$(dirname $(realpath "$0"))/.."

if [ ! -d "$PHP_BUILD_TMPDIR" ]; then
    if is_osx; then
        # $TMPDIR has trouble for building OSS on macOS, so we use /var/tmp
        # See also #467 ( https://github.com/php-build/php-build/pull/467 )
        PHP_BUILD_TMPDIR="/var/tmp/php-build"
    elif [ -d "$TMPDIR" ]; then
        PHP_BUILD_TMPDIR=$(realpath "$TMPDIR/php-build")
    else
        PHP_BUILD_TMPDIR="$(dirname $(mktemp --dry-run 2>/dev/null || echo "/var/tmp/tmp_dir"))/php-build"
    fi
fi

# set ${TMP} for backward compatibility
TMP=$PHP_BUILD_TMPDIR

# This file gets copied to `$PREFIX/etc/php.ini` once the build is complete.
# This is by default the PHP tarball's `php.ini-production`.
PHP_DEFAULT_INI="php.ini-production"

# Initialize the builtin definition path.
[ -z "$PHP_BUILD_DEFINITION_PATH" ] && PHP_BUILD_DEFINITION_PATH="$PHP_BUILD_ROOT/share/php-build/definitions"

# Read the list of arguments for the call to `./configure` in PHP's source.
# These arguments are read from `share/php-build/default_configure_options`.
CONFIGURE_OPTIONS=$(cat "$PHP_BUILD_ROOT/share/php-build/default_configure_options")

# Patches to be applied at the source
PATCH_FILES=""

[ -z "$PHP_BUILD_EXTRA_MAKE_ARGUMENTS" ] && PHP_BUILD_EXTRA_MAKE_ARGUMENTS=""

[ -z "$PHP_BUILD_INSTALL_EXTENSION" ] && PHP_BUILD_INSTALL_EXTENSION=""

[ -z "$PHP_BUILD_CONFIGURE_OPTS" ] && PHP_BUILD_CONFIGURE_OPTS=""

[ -z "$CONFIGURE_OPTS" ] && CONFIGURE_OPTS=""

# Enable Zend Thread Safety by setting this value to "yes"
[ -z "$PHP_BUILD_ZTS_ENABLE" ] && PHP_BUILD_ZTS_ENABLE=off

PHP_BUILD_VERSION="0.11.0dev"

# Error Code to return if a defintion was not found.
E_DEFINITION_NOT_FOUND=127

# Processes the Help front matter of the script and displays it on STDERR
function display_usage() {
    grep '^#/' <"$0" | cut -c4- >&3
}

function display_version() {
    echo "php-build v$PHP_BUILD_VERSION"
}

# Init the directories on first run
function init() {
    if [ ! -d "$PHP_BUILD_TMPDIR" ]; then
        mkdir -p "$PHP_BUILD_TMPDIR"
    fi

    if [ ! -d "$PHP_BUILD_TMPDIR/packages" ]; then
        mkdir "$PHP_BUILD_TMPDIR/packages"
    fi

    if [ ! -d "$PHP_BUILD_TMPDIR/source" ]; then
        mkdir "$PHP_BUILD_TMPDIR/source"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/share/php-build/before-install.d" ]; then
        mkdir -p "$PHP_BUILD_ROOT/share/php-build/before-install.d"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/share/php-build/after-install.d" ]; then
        mkdir -p "$PHP_BUILD_ROOT/share/php-build/after-install.d"
    fi
}

# Credits to Sam Stephenson
function http() {
    local method="$1"
    local url="$2"
    [ -n "$url" ] || return 1

    if type curl &>/dev/null; then
        "http_${method}_curl" "$url"
    elif type wget &>/dev/null; then
        "http_${method}_wget" "$url"
    else
        echo "error: please install \`curl\` or \`wget\` and try again" >&2
        exit 1
    fi
}

function http_head_curl() {
    curl -qsILf "$1"
}

function http_get_curl() {
    curl -qsSLf "$1"
}

function http_head_wget() {
    wget -q --server-response --spider "$1" 2>&1
}

function http_get_wget() {
    wget -nv -O- "$1"
}

# Logs a given log text with a [marker] to STDERR
function log() {
    local marker="$1"
    local text="$2"

    echo "[$marker]: $text" >&3
}

# Downloads a PHP Source Tarball and extracts it to `$PHP_BUILD_TMPDIR/source/$DEFINITION`
function download() {
    local url=$1
    local basename=$(download_filename $url)
    local package_file="$PHP_BUILD_TMPDIR/packages/$basename"
    local archive_type=$2
    local temp_package="$PHP_BUILD_TMPDIR/$basename"
    local package_name=$(definition_package_name)

    if [ -z "$archive_type" ]; then
        archive_type=${package_file##*.}
    fi

    if has_patch $package_name; then
        rm -rf "$PHP_BUILD_TMPDIR/source/$DEFINITION"
    fi

#    if [[ -d "$PHP_BUILD_TMPDIR/source/$DEFINITION" && -n "$(ls -A $PHP_BUILD_TMPDIR/source/$DEFINITION)" ]]; then
#        log "Skipping" "Already downloaded $url"
#        # extract once again to ensure that patches will apply
#        "extract_$archive_type" "$package_file" "$PHP_BUILD_TMPDIR/source/$DEFINITION"
#        return
#    fi

    log "Downloading" "$url"

    # Remove the temp file if one exists.
    if [ -f "$temp_package" ]; then
        rm "$temp_package"
    fi

    # Do not download a package when it's already downloaded.
    if [ ! -f "$package_file" ]; then
        http get "$url" > "$temp_package"
        cp "$temp_package" "$PHP_BUILD_TMPDIR/packages"
        rm "$temp_package"
    fi

    mkdir -p "$PHP_BUILD_TMPDIR/source/$DEFINITION"

    "extract_$archive_type" "$package_file" "$PHP_BUILD_TMPDIR/source/$DEFINITION"
}

function download_filename() {
    local url=$1

    # Try to get "filename" in Content-Disposition header; strip quotes and newlines
    local filename=$(http head $url | grep -o -E 'filename=.*$' | sed -e 's/filename=//' -e 's/\"//g' | tr -d '\r\n')

    # If header was empty use basename
    if [ -z $filename ]; then
        filename=$(basename $url)
    fi

    echo $filename
}

function extract_gz() {
    tar -x -z --strip-components 1 -f "$1" -C "$2"
}

function extract_bz2() {
    tar -x -j --strip-components 1 -f "$1" -C "$2"
}

# List all defintions found in $PHP_BUILD_DEFINITION_PATH
function list_definitions() {
    local sed_regex_switch='E'

    # sed switch -E is BSD specific and only added to UNIX sed after v4.2
    # fallback to -r if -E does not work
    if ! sed -${sed_regex_switch} '' /dev/null > /dev/null 2>&1; then
        sed_regex_switch='r'
    fi

    ls -1 "${PHP_BUILD_DEFINITION_PATH}/"* |
        xargs -n1 basename |
        sed -${sed_regex_switch} 's,([0-9])([a-z]),\1.\2,g; s,\b([0-9])\b,0\1,g;s,$,~,g' |
        sort |
        sed -${sed_regex_switch} 's,~$,,g; s,\b0([0-9])\b,\1,g; s,\.([a-z]),\1,g'
}

function trigger_before_install() {
    export PHP_BUILD_ROOT
    export PREFIX
    export SOURCE_PATH="$1"

    local triggers_dir="$PHP_BUILD_ROOT/share/php-build/before-install.d/"
    local triggers=$(ls "$triggers_dir")

    if [ -n "$triggers" ]; then
        for trigger in "$triggers_dir"*; do
            log "Before Install Trigger" "$(basename $trigger)"
            /usr/bin/env PATH="$PREFIX/bin:$PATH" "$trigger" 2>&4
        done
    fi
}

function trigger_after_install() {
    export PHP_BUILD_ROOT
    export PREFIX

    after_install "$PREFIX" 2>&4

    local triggers_dir="$PHP_BUILD_ROOT/share/php-build/after-install.d/"
    local triggers=$(ls "$triggers_dir")

    if [ -n "$triggers" ]; then
        for trigger in "$triggers_dir"*; do
            log "After Install Trigger" "$(basename $trigger)"
            /usr/bin/env PATH="$PREFIX/bin:$PATH" "$trigger" 2>&4
        done
    fi
}

# after_install(BUILD_DIR)
#
# Gets called after install has finished.
# Implement this function in your definitions.
function after_install() {
    local stub=1
}

function load_plugins() {
    if [ ! -d "$1" ]; then
        return 1
    fi

    for plugin in "$1/"*.sh
    do
        source $plugin
        log "Info" "Loaded $(basename $plugin .sh) Plugin."
    done
}

function check_dependency() {
  local brew_location=$(command -v brew)
  local autoconf=$(command -v autoconf)
  local autoconf_version=$($autoconf --version | head -n1 | sed -e 's/^[^0-9]*//' -e 's/[a-z]* *$//')
  IFS='.'; read -r -a version <<< "$autoconf_version"; IFS=' '

  if [[ $DEFINITION =~ 5.3.* ]]; then
    if is_osx && [[ -n $brew_location ]]; then
      local autoconf213=$(brew --prefix autoconf@2.13)
      if [[ ! -d $autoconf213 ]]; then
        log Error "You need autoconf 2.59 or lower to build this version of PHP. You are currently trying to use ${autoconf_version}. Use this command to install it 'brew install autoconf@2.13'";
        exit 1
      fi;
      export PHP_AUTOCONF="${autoconf213}/bin/autoconf213"
    elif [[ "${version[0]}${version[1]}" -gt 259 ]]; then
      log Error "You need autoconf 2.59 or lower to build this version of PHP. You are currently trying to use ${autoconf_version}";
      exit 1;
    fi;
  fi;
}

function build_package() {
    local source_path=$1
    local cwd="$(pwd)"

    if [ -z "$source_path" ]; then
      local source_path="$PHP_BUILD_TMPDIR/source/$DEFINITION"
    fi

    if [ ! -d "$PREFIX" ]; then
        mkdir -p "$PREFIX"
    fi

    apply_patches "$source_path" 2>&4

    configure_package "$source_path"

    trigger_before_install "$source_path" 2>&4

    log "Compiling" "$source_path"

    MAKE_OUTPUT='5'
    if [ "$VERBOSE" ]; then
        MAKE_OUTPUT='4'
    fi
    cd "$source_path"
    {
        make $PHP_BUILD_EXTRA_MAKE_ARGUMENTS
        make install
        if [ "$PHP_BUILD_KEEP_OBJECT_FILES" == "off" ]; then
            make clean
        fi
    } 1>&$MAKE_OUTPUT
    cd "$cwd"

    # Remove .dSYM extension from executables (OSX issue).
    if test -n "$(find $PREFIX/bin -maxdepth 1 -name '*.dSYM' -print -quit)"
    then
        for bin in "$PREFIX/bin/"*.dSYM; do
            mv "$bin" "${bin%*.dSYM}"
        done
    fi

    if [ -n "$PHP_DEFAULT_INI" ]; then
        if [ -f "$source_path/$PHP_DEFAULT_INI" ]; then
            cp "$source_path/$PHP_DEFAULT_INI" "$PREFIX/etc/php.ini"
        else
            if [ -f "$PHP_DEFAULT_INI" ]; then
                cp "$PHP_DEFAULT_INI" "$PREFIX/etc/php.ini"
            fi
        fi
    fi

    # Create php-fpm.conf from php-fpm.conf.default
    if [ -f "$PREFIX/etc/php-fpm.conf.default" ]; then
        cp "$PREFIX/etc/php-fpm.conf"{.default,}

        if [ -f "$PREFIX/etc/php-fpm.d/www.conf.default" ]; then
            cp "$PREFIX/etc/php-fpm.d/www.conf"{.default,}
        fi
    fi

    # copy the init script
    if [ -f "$source_path/sapi/fpm/init.d.php-fpm" ]; then
        mkdir -p "$PREFIX/etc/init.d"
        cp "$source_path/sapi/fpm/init.d.php-fpm" "$PREFIX/etc/init.d/php-fpm"
        chmod +x "$PREFIX/etc/init.d/php-fpm"
    fi

    # copy the systemd unit
    if [ -f "$source_path/sapi/fpm/php-fpm.service" ]; then
        mkdir -p "$PREFIX/etc/systemd/system"
        cp "$source_path/sapi/fpm/php-fpm.service" "$PREFIX/etc/systemd/system/php-fpm.service"
    fi

    # Comment out 'extension_dir' in old default php.ini files (PHP 5.2). In
    # newer ones (>= 5.3) this is already the default.
    if [ -f "$PREFIX/etc/php.ini" ]; then
        sed -i.bak -e 's/^\(extension_dir\)/; \1/g' "$PREFIX/etc/php.ini"
        rm "$PREFIX/etc/php.ini.bak"
    fi
}

# Collect platform patches
function platform_patches() {
    local patches_dir="$PHP_BUILD_ROOT/share/php-build/patches/*"

    for patch in $patches_dir; do
        if [[ $patch =~ $operating_system-php-$PHP_VERSION_MAJOR.$PHP_VERSION_MINOR.$PHP_VERSION_PATCH- ]]; then
            patch_file "$patch"
            continue
        fi;

        if [[ $patch =~ $operating_system-php-$PHP_VERSION_MAJOR.$PHP_VERSION_MINOR- ]]; then
            patch_file "$patch"
            continue
        fi;

        if [[ $patch =~ $operating_system-php-$PHP_VERSION_MAJOR- ]]; then
            patch_file "$patch"
            continue
        fi;
    done
}

# Apply patch files
function apply_patches() {
    local source_path=$1

    if [ -n "$PATCH_FILES" ]; then
        for patch in $PATCH_FILES; do
            log "Info" "Applying patches: $patch"
            out=$(patch -d $source_path -N -p1 --verbose -u < $patch) || (>2 echo $out && exit 1)
        done
    fi
}

# Install extensions
function install_extensions() {
    # handle extensions that should be installed by defined environment variable
    # variable must be in the format: extension_name=version extension_name=version
    for extension_def in $PHP_BUILD_INSTALL_EXTENSION; do
        local extension=$(echo $extension_def | cut -d"=" -f1)
        local version=$(echo $extension_def | cut -d"=" -f2)
        local first_char=$(echo $version | cut -c1 )

        # if first character of version is an "@" it's meant to be a revision
        if [ $first_char = "@" ]; then
            local version=$(echo $version | cut -c"2-")
            install_extension_source $extension "$version"
        else
            install_extension $extension $version
        fi
    done
}

# Definition commands
# -------------------

# ### install_package
#
# Downloads and builds the PHP tarball from the given URL.
function install_package() {
    local url=$1
    local archive_type=$2

    {
        check_dependency
        platform_patches "$source_path" 2>&4

        download $url $archive_type
        cd "$PHP_BUILD_TMPDIR/source/$DEFINITION"
        build_package
        cd - > /dev/null
    } >&4 2>&1
}

function is_php_package() {
    local package_name=$1

    case "$package_name" in
    php-* ) return 0 ;;
    esac

    return 1
}

function definition_package_name() {
    echo "php-$DEFINITION"
}

# ### configure_option
#
# This function sets and unsets arguments for `configure`. Pass it
# the `-D` option to unset the argument given in `$2`. Otherwise
# the first argument is the name of the option and the second
# argument contains the optional value.
function configure_option() {
    if [ "$1" = "-D" ]; then
        # This variable will contain the filtered arguments.
        local filtered=

        for option in $CONFIGURE_OPTIONS; do
            # If the argument starts with the given string in `$1`
            # then skip it from concatenation. Otherwise add it to
            # the filtered options.
            case "$option" in
                "$2"*) ;;
                *) filtered="$filtered $option";;
            esac
        done

        # Trim the leading whitespace added in the concatenation.
        filtered=$(echo "$filtered" | sed -e 's/[ ]*//')

        # Then replace the old argument list with the new one.
        CONFIGURE_OPTIONS="$filtered"
        return 0
    else
        if [ "$1" = "-R" ]; then
            configure_option -D "$2"
            configure_option "$2" "$3"
            return 0
        fi
    fi

    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $1"

    if [ -n "$2" ]; then
        CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS=$2"
    fi
}

# ### patch_file
#
# Add a patch to internal patch list
function patch_file() {
    local patches_dir="$PHP_BUILD_ROOT/share/php-build/patches"
    local patch="$patches_dir/$1"

    if [ -f "$1" ]; then
        local patch="$1"
    fi

    if [ -n "$PATCH_FILES" ]; then
        PATCH_FILES="$PATCH_FILES $patch"
    else
        PATCH_FILES="$patch"
    fi
}

function has_patch() {
    local package_name=$1

    if is_php_package $package_name; then
        [ -n "$PATCH_FILES" ]
    else
        return 1
    fi
}

# ### with_openssl
#
# Configures PHP with OpenSSL support.
#
# This is left in for backwards compatibility with
# definitions which were written before `--with-openssl`
# was in the list of default configure arguments.
function with_openssl() {
    stub=1
}

function with_apxs2() {
    local apxs="$1"
    shift

    if [ -z "$apxs" ]; then
        apxs="$PHP_BUILD_APXS"
    fi
    PHP_BUILD_APXS="$apxs"

    configure_option "--with-apxs2" "$apxs"
}

# Get entire configuration string
function get_configure_option() {
  local configure="$CONFIGURE_OPTIONS $PHP_BUILD_CONFIGURE_OPTS $CONFIGURE_OPTS"
  echo "$configure"
}

# Configure Stage
# ---------------

# This is invoked by `build_package` and is used to
# build PHP with the arguments in `$CONFIGURE_OPTIONS`.
#
function configure_package() {
    local source_path=$1
    local backup_pwd=$(pwd)
    local package_name="$(definition_package_name)"
    local brew_location=$(command -v brew)

    CONFIGURE_OUTPUT='5'
    if [ "$VERBOSE" ]; then
        CONFIGURE_OUTPUT='4'
    fi

    cd "$source_path"

    {
        if has_patch $package_name; then
            buildconf_wrapper --force
        elif [ ! -f ./configure ]; then
            buildconf_wrapper
        fi
    } 1>&$CONFIGURE_OUTPUT

    if [ "$PHP_BUILD_ZTS_ENABLE" == "on" ]; then
        configure_option "--enable-maintainer-zts"
        log "Warning" "Enabling Zend Thread Safety is meant only for maintainers!"
    fi

    sdkpath=""
    if is_osx; then
      sdkpath=$(xcrun --show-sdk-path)
    fi;

    if is_osx && [[ "${PHP_VERSION_MAJOR}${PHP_VERSION_MINOR}" -eq 54 && $(get_configure_option) =~ "--with-gd" ]]; then
      if [[ -z "$brew_location" ]]; then
        log Warning "Brew is missing, cannot determine openssl location, set --with-openssl=<dir> in CONFIGURE_OPTS variable"
      else
        # php 5.4 uses 2.0.3.1
        # 2.21
        # https://raw.githubusercontent.com/Homebrew/homebrew-core/ec59788a8c1006a26190bae399a4f60e6f2edffa/Formula/gd.rb

        # forcing external gd
        gdlib_prefix="$(brew --prefix gd)"
        gdlib_version=$(pkg-config --modversion gdlib)
        IFS='.'; read -r -a version <<< "$gdlib_version"; IFS=' '

        if [[ "${PHP_VERSION_MAJOR}${PHP_VERSION_MINOR}" -lt 70 && "${version[0]}${version[1]}" -gt 21 ]]; then
          log Warning "This version of PHP requires GDLib 2.1.x or lower. You need to install it manually"

          log Info "Commands:"
          log Info "- cd /tmp/"
          log Info "- wget https://github.com/libgd/libgd/releases/download/gd-2.1.0/libgd-2.1.0.tar.xz"
          log Info "- tar xvf libgd-2.1.0.tar.xz"
          log Info "- cd libgd-2.1.0"
          log Info "- mkdir -p /usr/local/opt/gd@2.1"
          log Info "- ./configure --build=x86_64-apple-darwin --prefix=/usr/local/opt/gd@2.1"
          log Info "- make"
          log Info "- make install"

          gdlib_prefix="/usr/local/opt/gd@2.1"

          export LDFLAGS="${LDFLAGS} -L${gdlib_prefix}/lib"
          export CPPFLAGS="${CPPFLAGS} -I${gdlib_prefix}/include"
          export DYLD_LIBRARY_PATH="${DYLD_LIBRARY_PATH}:${gdlib_prefix}"
          export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:${gdlib_prefix}/lib/pkgconfig"
        fi;

        if [[ ! -d "$gdlib_prefix" ]]; then
          log Error "Missing gdlib dependency, please install it"
          exit 1
        fi;

        configure_option -R "--with-gd" "$gdlib_prefix"
      fi
    fi;

    if is_osx && [[ "${PHP_VERSION_MAJOR}${PHP_VERSION_MINOR}" -eq 54 ]]; then
      export EXTRA_LIBS="-lresolv"
    fi;

    # we cannot use bundled openssl from OSX it's missing headers e.g.: evp.h
    if is_osx && [[ $(get_configure_option) =~ "--with-openssl" ]]; then
      if [[ -z "$brew_location" ]]; then
        log Warning "Brew is missing, cannot determine openssl location, set --with-openssl=<dir> in CONFIGURE_OPTS variable"
      else
        openssl_prefix="$(brew --prefix openssl)"
        openssl_version=$(${openssl_prefix}/bin/openssl version | cut -d' ' -f2)
        IFS='.'; read -r -a version <<< "$openssl_version"; IFS=' '

        if [[ "${PHP_VERSION_MAJOR}${PHP_VERSION_MINOR}" -lt 70 && "${version[0]}${version[1]}${version[2]}" != "102k" ]]; then
          log Warning "This version of PHP requires OpenSSL 1.0.2k. You need to install it manually"

          # see https://github.com/liip/build-entropy-php/blob/7156216bccdd125bc7df6fdf18cdcfc68637dcc8/lib/Package/openssl.pm
          log Info "Commands:"
          log Info "- cd /tmp/"
          log Info "- wget https://www.openssl.org/source/openssl-1.0.2k.tar.gz"
          log Info "- tar xvf openssl-1.0.2k.tar.gz"
          log Info "- cd openssl-1.0.2k"
          log Info "- mkdir -p /usr/local/opt/openssl@1.0.2k"
          log Info "- ./Configure darwin64-x86_64-cc --prefix=/usr/local/opt/openssl@1.0.2k"
          log Info "- make"
          log Info "- make install"

          openssl_prefix="/usr/local/opt/openssl@1.0.2k"

          export LDFLAGS="${LDFLAGS} -L${openssl_prefix}/lib"
          export CPPFLAGS="${CPPFLAGS} -I${openssl_prefix}/include"
          export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:${openssl_prefix}/lib/pkgconfig"
        fi;

        if [[ ! -d "$openssl_prefix" ]]; then
          log Error "Missing openssl dependency, please install it"
          exit 1
        fi;

        configure_option -R "--with-openssl" "$openssl_prefix"
      fi;
    fi

    if is_osx && [[ $(get_configure_option) =~ "--with-libxml-dir" ]]; then
        configure_option -R "--with-libxml-dir" "${sdkpath}/usr"
    fi

    if is_osx && [[ $(get_configure_option) =~ "--with-zlib-dir" ]]; then
      configure_option -R "--with-zlib-dir" "${sdkpath}/usr"
    fi;

    if is_osx && [[ $(get_configure_option) =~ "--with-bz2" ]]; then
      configure_option -R "--with-bz2" "${sdkpath}/usr"
    fi;

    if is_osx && [[ $(get_configure_option) =~ "--with-curl" ]]; then
      configure_option -R "--with-curl" "${sdkpath}/usr"
    fi;

    # default --with=iconv=yes
    if is_osx; then
      if [[ -z "$brew_location" ]]; then
        log Warning "Brew is missing, cannot determine libiconv location, set --with-iconv=<dir> in CONFIGURE_OPTS variable"
      else
        if [[ $(osx_major) -eq 10 ]] && [[ $(osx_minor) -ge 15 ]]; then
          libiconv_prefix="${sdkpath}/usr"
        else
          libiconv_prefix="$(brew --prefix libiconv)"
        fi;

        if [[ ! -d "$libiconv_prefix" ]]; then
          log Error "Missing libiconv dependency, please install it"
          exit 1
        fi;

        configure_option -R "--with-iconv" "${libiconv_prefix}"
      fi;
    fi;

    if is_osx && [[ $(get_configure_option) =~ "--with-mcrypt" && $DEFINITION =~ 7.1.* ]]; then
      if [[ -z "$brew_location" ]]; then
        log Warning "Brew is missing, cannot determine mcrypt location, set --with-mcrypt=<dir> in CONFIGURE_OPTS variable"
      else
        lmcrypt_prefix="$(brew --prefix mcrypt)"
        if [[ ! -d "$lmcrypt_prefix" ]]; then
          log Error "Missing mcrypt dependency, please install it"
          exit 1
        fi;
        configure_option -R "--with-mcrypt" "$lmcrypt_prefix"
      fi;
    fi;

    if is_osx && [[ $(get_configure_option) =~ "--with-libzip" ]]; then
      if [[ -z "$brew_location" ]]; then
        log Warning "Brew is missing, cannot determine openssl location, set --with-libzip=<dir> in CONFIGURE_OPTS variable"
      else
        libzip_prefix="$(brew --prefix libzip)"
        if [[ ! -d "$libzip_prefix" ]]; then
          log Error "Missing libzip dependency, please install it"
          exit 1
        fi;
        configure_option -R "--with-libzip" "$libzip_prefix"
      fi;
    fi;

    if is_osx && [[ $(get_configure_option) =~ "--with-tidy" ]]; then
      if [[ -z "$brew_location" ]]; then
        log Warning "Brew is missing, cannot determine openssl location, set --with-tidy=<dir> in CONFIGURE_OPTS variable"
      else
        tidy_prefix="$(brew --prefix tidy-html5)"
        tidy_version=$(${tidy_prefix}/bin/tidy --version | sed -e 's/^[^0-9]*//' -e 's/[a-z]* *$//')
        IFS='.'; read -r -a version <<< "$tidy_version"; IFS=' '

        if [[ "${PHP_VERSION_MAJOR}${PHP_VERSION_MINOR}" -lt 70 && "${version[0]}${version[1]}" -gt 49 ]]; then
          log Warning "This version of PHP requires tidy-html 4.9.x or lower. You need to install it manually"

          log Info "Commands:"
          log Info "- cd /tmp/"
          # daef0371563dea562ad09b6dcf060dd457bf275e 4.9.37
          log Info "- wget https://github.com/htacg/tidy-html5/archive/daef0371563dea562ad09b6dcf060dd457bf275e.tar.gz"
          log Info "- tar xvf daef0371563dea562ad09b6dcf060dd457bf275e.tar.gz"
          log Info "- cd tidy-html5-daef0371563dea562ad09b6dcf060dd457bf275e"
          log Info "- cd build/cmake"
          log Info "- mkdir -p /usr/local/opt/tidy-html5@4.9"
          log Info "- cmake ../..  -DCMAKE_INSTALL_PREFIX=/usr/local/opt/tidy-html5@4.9 -DCMAKE_BUILD_TYPE=Release"
          log Info "- make"
          log Info "- make install"

          tidy_prefix="/usr/local/opt/tidy-html5@4.9"
        fi;

        if [[ ! -d "$tidy_prefix" ]]; then
          log Error "Missing tidy-html5 dependency, please install it"
          exit 1
        fi;
        configure_option -R "--with-tidy" "$tidy_prefix"
      fi;
    fi;

    # replace readline with libedit
    # checking for rl_pending_input in -lreadline... no
    # configure: error: invalid readline installation detected. Try --with-libedit instead.'
    if is_osx && [[ $(get_configure_option) =~ "--with-readline" ]]; then
      configure_option -D "--with-readline"
      configure_option -R "--with-libedit"
    fi;

    if is_osx && [[ $(get_configure_option) =~ "--with-libedit" ]]; then
      configure_option -R "--with-libedit" "${sdkpath}/usr"
    fi;

    if is_osx; then
      icu4c_prefix=""
      # check that use did not supply us with --with-icu-dir
      if [[ ! $(get_configure_option) =~ "--with-icu-dir" ]]; then
        # check that icu-config exists
        if ! command -v icu-config; then
          if [[ -z "$brew_location" ]]; then
            log Warning "Brew is missing, cannot determine icu4c location, set --with-icu-dir=<dir> in CONFIGURE_OPTS variable"
          else
            icu4c_prefix="$(brew --prefix icu4c)"
            icu4c_version=$(${icu4c_prefix}/bin/icu-config --version)
            IFS='.'; read -r -a version <<< "$icu4c_version"; IFS=' '

            if [[ "${PHP_VERSION_MAJOR}${PHP_VERSION_MINOR}" -eq 54 && "${version[0]}${version[1]}" -gt 552 ]]; then
              log Info "Commands:"
              log Info "- cd /tmp/"
              log Info "- wget https://github.com/unicode-org/icu/releases/download/release-55-2/icu4c-55_2-src.tgz"
              log Info "- tar xvf icu4c-55_2-src.tgz"
              log Info "- cd icu/source"
              log Info "- wget https://patch-diff.githubusercontent.com/raw/unicode-org/icu/pull/579.diff"
              log Info "- patch -p3 -N < 579.diff"
              log Info "- ./configure --with-library-bits=64 --prefix=/usr/local/opt/icu4c@55.2"
              log Info "- make"
              log Info "- make install"

              icu4c_prefix="/usr/local/opt/icu4c@55.2"
            fi;
          fi;
        else
          icu_config=$(command -v icu-config);
          icu4c_prefix=$(${icu_config} --prefix)
        fi;
      fi;

      if [[ ! -d "$icu4c_prefix" ]]; then
        log Error "Missing icu4c dependency, please install it"
        exit 1
      fi;

      export LDFLAGS="${LDFLAGS} -L${icu4c_prefix}/lib"
      export CPPFLAGS="${CPPFLAGS} -I${icu4c_prefix}/include"
      export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:${icu4c_prefix}/lib/pkgconfig"

      configure_option "--with-icu-dir" "$icu4c_prefix"
      icu_version=$(${icu4c_prefix}/bin/icu-config --version | cut -f1 -d'.')

      # icu4c 59+ requires C++11
      if [[ -z "$CXXFLAGS" && $icu_version -gt "61" ]]; then
          # icu4c 61+ comparability (see #499)
          export CXXFLAGS="-std=c++11 -stdlib=libc++ -DU_USING_ICU_NAMESPACE=1"
      elif [[ -z "$CXXFLAGS" && $icu_version -gt "59" ]]; then
          export CXXFLAGS="-std=c++11 -stdlib=libc++"
      fi
    fi

    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $PHP_BUILD_CONFIGURE_OPTS $CONFIGURE_OPTS"

    # replacing new lines
    # it's failing build of 5.3.29 on MacOS
    CONFIGURE_OPTIONS=$(echo "$CONFIGURE_OPTIONS" | tr '\n' ' ')

    # Add the config-file-path, config-file-scan-dir aswell as the
    # prefix to the build options, these cannot be changed by definitions.
    local argv="--with-config-file-path=${PREFIX}/etc"
    argv="${argv} --with-config-file-scan-dir=${PREFIX}/etc/conf.d"
    argv="${argv} --prefix=${PREFIX}"
    argv="${argv} --libexecdir=${PREFIX}/libexec"
    argv="${argv} --datadir=${PREFIX}/share/php"
    argv="${argv} --mandir=${PREFIX}/share/man"
    argv="${argv} ${CONFIGURE_OPTIONS}"

    log "Preparing" "$source_path"

    if [ ! -d "$PREFIX/etc/conf.d" ]; then
        mkdir -p "$PREFIX/etc/conf.d"
    fi

    if [ ! -d "$PREFIX/libexec" ]; then
        mkdir -p "$PREFIX/libexec"
    fi

    # Set the lib dir to `lib64` on **x86_64**
    # systems.
    local append_default_libdir='yes'
    if [[ "$CONFIGURE_OPTIONS" =~ "--with-libdir" ]]; then
      append_default_libdir='no'
    fi;

    if [ "$(uname -p)" = "x86_64" ] && [ "${append_default_libdir}" = 'yes' ]; then
        argv="$argv --with-libdir=lib64"
    fi

    # Avoid installing PHP binary as "php.dSYM" on MacOSX 10.7 and 10.8.
    # PHP 5.2 and 5.3 has the problem.
    # See https://github.com/php/php-src/pull/135
    if is_osx; then
        export ac_cv_exeext=''
    fi

    if is_osx; then
      argv="${argv} --build=x86_64-apple-darwin"
    fi;

    ./configure $argv 1>&$CONFIGURE_OUTPUT

    # Use php-build prefix for the Apache libexec folder
    if [ -n "$PHP_BUILD_APXS" ]; then
        apxs_libexecdir=$($PHP_BUILD_APXS -q LIBEXECDIR)
        sed -i"" -e "s|'\$(INSTALL_ROOT)${apxs_libexecdir}'|${PREFIX}${apxs_libexecdir}|g" ${source_path}/Makefile
    fi

    cd "$backup_pwd"
}

function buildconf_wrapper() {
    local result

    set +e
    out=$(./buildconf "$@" 2>&1)
    result=$?
    set -e

    if [ $result -eq 0 ]; then
        echo $out
    else
        echo "Failed to run 'buildconf'." 1>&2
        cat $out 1>&2
    fi

    return $result
}

# Handles build errors, and displays the last 10 lines of the build log
function build_error() {
    {
        echo
        echo "-----------------"
        echo "|  BUILD ERROR  |"
        echo "-----------------"
        echo
        echo "Here are the last 10 lines from the log:"
        echo
        echo "-----------------------------------------"
        echo "$(tail -n 10 "$LOG_PATH")"
        echo "-----------------------------------------"
        echo
        echo "The full Log is available at '${LOG_PATH}'."
    } >&3

    # Removes the prefix when the build fails.
    if [ -z "$PHP_BUILD_DEBUG" ]; then
        cleanup_abort > /dev/null
    fi
}

function cleanup_abort() {
    log "Warn" "Aborting build."

    make -C "$PHP_BUILD_TMPDIR/source/$DEFINITION" clean &> /dev/null
}

function find_definition() {
    local definition="$1"

    # Check if the supplied argument is an existing file itself,
    # to use definitions outside of the builtin definition path.
    if [ -f "$definition" ]; then
        echo "$definition"
        return 0
    fi

    if [ -f "$PHP_BUILD_DEFINITION_PATH/$definition" ]; then
        echo "$PHP_BUILD_DEFINITION_PATH/$definition"
        return 0
    else
        return 1
    fi
}

function enable_builtin_opcache {
    log Info "Enabling Opcache..."

    local ext_dir=$("$PREFIX/bin/php-config" --extension-dir)

    if [ ! -f "$ext_dir/opcache.so" ]; then
        log Info "Aborting: opcache.so not found"
        return 0
    fi

    echo "zend_extension=$ext_dir/opcache.so" >> "$PREFIX/etc/php.ini"
    log Info "Done"
}

# Here the magic begins
# ---------------------

# Display the Usage message if no arguments are given.
if [ -z $1 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    display_usage
    exit
fi

if [ "$1" = "-V" ] || [ "$1" = "--version" ]; then
    display_version
    exit
fi

VERBOSE=
if [ "$1" = "-v" ] || [ "$1" = "--verbose" ]; then
    VERBOSE=y
    shift 1
fi

# Whether do "make clean" after installation or not
if [ "$1" = "-k" ] || [ "$1" = "--keep" ]; then
    PHP_BUILD_KEEP_OBJECT_FILES=on
    shift 1
fi
[ -z "$PHP_BUILD_KEEP_OBJECT_FILES" ] && PHP_BUILD_KEEP_OBJECT_FILES=off

if [ "$1" = "--definitions" ]; then
    list_definitions
    exit
fi

if [ "$1" = "--definition" ]; then
    if [ -z $2 ]; then
        display_usage
        exit
    fi
    DEFINITION=$2
    if ! find_definition "$DEFINITION" > /dev/null; then
        log Error "Definition $DEFINITION not found."
        exit $E_DEFINITION_NOT_FOUND
    fi
    cat $(find_definition "$DEFINITION")
    exit
fi

# Set up the directories needed for the source and the downloaded packages
init

# If `-i` or `--ini` is given as first argument, then treat the second argument
# as `php.ini` file.
if [ "$1" = "-i" ] || [ "$1" = "--ini" ]; then
    # If an existing path is passed (and the path is a file) then use this file,
    # otherwise use `php.ini-<value>` from the tarball.
    if [ -f "$2" ]; then
        PHP_DEFAULT_INI="$2"
    else
        PHP_DEFAULT_INI="php.ini-$2"
    fi
    shift
    shift
fi

# This is the name of the definition we want to build.
DEFINITION=$1

# The built PHP version is placed in this directory.
PREFIX=$2

IFS='.'; read -r -a version <<< "$DEFINITION"; IFS=' '
PHP_VERSION_MAJOR="${version[0]}"
PHP_VERSION_MINOR="${version[1]}"
PHP_VERSION_PATCH="${version[2]}"

if [ -z "$PREFIX" ]; then
    display_usage
    exit 1
fi

if ! find_definition "$DEFINITION" > /dev/null; then
    log Error "Definition $DEFINITION not found."
    exit $E_DEFINITION_NOT_FOUND
fi

DEFINITION_PATH="$(find_definition "$DEFINITION")"
DEFINITION="$(basename "$DEFINITION_PATH")"
LOG_NAME="$(basename "$DEFINITION_PATH")"
# Generate the Path for the build log.
TIME="$(date "+%Y%m%d%H%M%S")"
LOG_PATH="/tmp/php-build.$LOG_NAME.$TIME.log"

# Redirect everything logged to STDERR (except messages by php-build itself)
# to the Log file.
if [ "$VERBOSE" ]; then
    exec 4> >(tee $LOG_PATH)
else
    exec 4<> "$LOG_PATH"
fi

# Load extension plugin
source "$PHP_BUILD_ROOT/share/php-build/extension/extension.sh"
log Info "Loaded extension plugin"

# Load all definition plugins. Plugins register functions
# for use whithin definitions. See the xdebug plugin examples.
load_plugins "$PHP_BUILD_ROOT/share/php-build/plugins.d"

log Info "$PHP_DEFAULT_INI gets used as php.ini"
log Info "Building $DEFINITION into $PREFIX"

# Handle script termination with.
trap cleanup_abort SIGINT SIGTERM

# Handle Script Errors.
trap build_error ERR EXIT

# Source the definition file
source "$DEFINITION_PATH"

# Run executables placed in `share/php-build/after-install.d`
trigger_after_install 2>&4

# Installed extensions defined by environment variable
install_extensions 2>&4

# Unbind the error handler.
trap - ERR
trap - EXIT

# Display a notice if build warnings got logged.
if [ -n "$LOG_PATH" ] && [ -n "$(head -100 $LOG_PATH)" ]; then
    log "Info" "The Log File is not empty, but the Build did not fail.\
 Maybe just warnings got logged.\
 You can review the log in $LOG_PATH or rebuild with '--verbose' option"
elif [ -f "$LOG_PATH" ]; then
    rm -rf "$LOG_PATH"
fi

log "Success" "Built $DEFINITION successfully."

trap - SIGINT
trap - SIGTERM

